{"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/WorkflowInput","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/WorkflowOutput"]},{"title":"Initializers","identifiers":["doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/init()-52sxn","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/init(with:)-5zumv"]},{"title":"Instance Properties","identifiers":["doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflowStorage","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/workflow"]},{"title":"Instance Methods","identifiers":["doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/backUpInWorkflow()","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflow()","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflow(_:)","doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/shouldLoad()-5wyq1"]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"Discussion","level":3,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important to make sure your "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" is not dependent on other "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"It’s okay to specify that a certain kind of data needs to be passed in and passed out, but keep your "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" from knowing what came before, or what’s likely to come after."},{"type":"text","text":" "},{"type":"text","text":"In that way you’ll end up with pieces of a workflow that can be moved or put into multiple places with ease."}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare an "},{"type":"strong","inlineContent":[{"type":"text","text":"input"}]},{"type":"text","text":" type of "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" when the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" will ignore data passed in from the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":".  An "},{"type":"strong","inlineContent":[{"type":"text","text":"output"}]},{"type":"text","text":" type of "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" means data will not be passed forward."}]}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"_workflowPointer"},{"type":"text","text":" has to be declared as a property on the type conforming to "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" but it is set by the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":", and should not be set by anything else."}]}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a superclass that is a "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" and expect subclasses to be able to define their own methods, such as "},{"type":"codeVoice","code":"shouldLoad"},{"type":"text","text":", the superclass should declare those methods, and the subclasses should override them. Otherwise you will find the subclasses do not behave as expected."}]}]},{"anchor":"Example","level":4,"type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" with a "},{"type":"codeVoice","code":"WorkflowInput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"WorkflowOutput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Never"}]},{"type":"codeListing","syntax":"swift","code":["class FR1: FlowRepresentable { \/\/ Mark this class as `final` to avoid the required keyword on init","   weak var _workflowPointer: AnyFlowRepresentable?","   required init(with name: String) { }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" with a "},{"type":"codeVoice","code":"WorkflowInput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"WorkflowOutput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Never"}]},{"type":"codeListing","syntax":"swift","code":["final class FR1: FlowRepresentable { \/\/ Classes synthesize an empty initializer already, you are good!","   weak var _workflowPointer: AnyFlowRepresentable?","}"]},{"anchor":"Note","level":4,"type":"heading","text":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declaring your own custom initializer can result in a compiler error with an unfriendly message"}]},{"type":"codeListing","syntax":"swift","code":["class FR1: FlowRepresentable { \/\/ Results in compiler error for 'init()' being unavailable","   weak var _workflowPointer: AnyFlowRepresentable?","   init(myCustomInitializer property: Int) { }","   \/\/ required init() { } \/\/ declare your own init() to satisfy the protocol requirements and handle the compiler error","}"]}]}],"variants":[{"paths":["\/documentation\/workflow\/flowrepresentable"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A component in a "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; should be independent of the workflow context."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}],"title":"FlowRepresentable","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:8Workflow17FlowRepresentableP","modules":[{"name":"Workflow"}],"navigatorTitle":[{"kind":"identifier","text":"FlowRepresentable"}]},"hierarchy":{"paths":[["doc:\/\/Workflow\/documentation\/Workflow"]]},"documentVersion":0,"references":{"doc://Workflow/documentation/Workflow/FlowRepresentable/proceedInWorkflow()":{"conformance":{"constraints":[{"type":"codeVoice","code":"WorkflowOutput"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"proceedInWorkflow()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"proceedInWorkflow"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Moves forward in the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; if at the end, calls the "},{"type":"codeVoice","code":"onFinish"},{"type":"text","text":" closure used when launching the workflow."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflow()","kind":"symbol","type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/proceedinworkflow()"},"doc://Workflow/documentation/Workflow/FlowRepresentable/shouldLoad()-5wyq1":{"defaultImplementations":1,"role":"symbol","title":"shouldLoad()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shouldLoad"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean indicating the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":" should load the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"; defaults to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/shouldLoad()-5wyq1","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/shouldload()-5wyq1"},"doc://Workflow/documentation/Workflow/FlowRepresentable/WorkflowOutput":{"role":"symbol","title":"WorkflowOutput","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"WorkflowOutput"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"}],"abstract":[{"type":"text","text":"The type of data passed forward from the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"; defaulted to "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"; "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" means data will not be passed forward."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/WorkflowOutput","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/workflowoutput"},"doc://Workflow/documentation/Workflow/FlowRepresentable/backUpInWorkflow()":{"role":"symbol","title":"backUpInWorkflow()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"backUpInWorkflow"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Backs up in the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/backUpInWorkflow()","kind":"symbol","type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/backupinworkflow()"},"doc://Workflow/documentation/Workflow/FlowRepresentable/init()-52sxn":{"defaultImplementations":2,"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Creates a "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/init()-52sxn","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/init()-52sxn"},"doc://Workflow/documentation/Workflow/FlowRepresentable/proceedInWorkflowStorage":{"role":"symbol","title":"proceedInWorkflowStorage","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"proceedInWorkflowStorage"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"AnyWorkflow","preciseIdentifier":"s:8Workflow03AnyA0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"PassedArgs","preciseIdentifier":"s:8Workflow03AnyA0C10PassedArgsO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":":nodoc: Your tests may want to manually set the closure so they can make assertions it was called, this is simply a convenience available for that."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflowStorage","kind":"symbol","type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/proceedinworkflowstorage"},"doc://Workflow/documentation/Workflow":{"role":"collection","title":"Workflow","abstract":[{"type":"text","text":"Workflow is a library that lets you easily manage journeys through your Swift application."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow","kind":"symbol","type":"topic","url":"\/documentation\/workflow"},"doc://Workflow/documentation/Workflow/FlowRepresentable":{"role":"symbol","title":"FlowRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}],"abstract":[{"type":"text","text":"A component in a "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; should be independent of the workflow context."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlowRepresentable"}],"url":"\/documentation\/workflow\/flowrepresentable"},"doc://Workflow/documentation/Workflow/FlowRepresentable/init(with:)-5zumv":{"defaultImplementations":1,"role":"symbol","title":"init(with:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"WorkflowInput"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" with the specified "},{"type":"codeVoice","code":"WorkflowInput"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/init(with:)-5zumv","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/init(with:)-5zumv"},"doc://Workflow/documentation/Workflow/FlowRepresentable/WorkflowInput":{"role":"symbol","title":"WorkflowInput","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"WorkflowInput"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"}],"abstract":[{"type":"text","text":"The type of data coming into the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"; defaulted to "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"; "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"means the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" will ignore data passed in from the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/WorkflowInput","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/workflowinput"},"doc://Workflow/documentation/Workflow/FlowRepresentable/workflow":{"role":"symbol","title":"workflow","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"workflow"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyWorkflow","preciseIdentifier":"s:8Workflow03AnyA0C"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Access to the "},{"type":"codeVoice","code":"AnyWorkflow"},{"type":"text","text":" controlling the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/workflow","kind":"symbol","type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/workflow"},"doc://Workflow/documentation/Workflow/FlowRepresentable/proceedInWorkflow(_:)":{"role":"symbol","title":"proceedInWorkflow(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"proceedInWorkflow"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"WorkflowOutput"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Moves forward while passing arguments forward in the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; if at the end, calls the "},{"type":"codeVoice","code":"onFinish"},{"type":"text","text":" closure used when launching the workflow."}],"identifier":"doc:\/\/Workflow\/documentation\/Workflow\/FlowRepresentable\/proceedInWorkflow(_:)","kind":"symbol","type":"topic","url":"\/documentation\/workflow\/flowrepresentable\/proceedinworkflow(_:)"}}}